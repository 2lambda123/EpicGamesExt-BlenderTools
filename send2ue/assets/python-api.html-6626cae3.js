import{_ as e,o as a,c as n,e as s}from"./app-3ee0fe23.js";const t="/BlenderTools/send2ue/assets/1-bf4e2aaa.png",o={},p=s(`<h1 id="python-api" tabindex="-1"><a class="header-anchor" href="#python-api" aria-hidden="true">#</a> Python API</h1><p>Send to Unreal was designed to handle the generation of Unreal asset types. However, it does not handle every possible scenario that your production might need. That is why the tool has a programmable python interface that allows the user to set properties and to automate processes before and after the Send to Unreal operation.</p><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><p>All of the properties can be accessed directly on the following scene data object in the blender API.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>context<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>send2ue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>This scene property data is persistent and stored within your blend file. If your blend file is saved, then the state of your scene properties gets saved into the file as well.</p></div><p>To find the name of the property you want to read or edit, you can use the blender python console and the tab key to list the properties, or open the Send to Unreal Settings Dialog and hover on a property. Under the tool tip you will see the API reference for the desired property.</p><p><img src="`+t+`" alt="1"></p><h2 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> Operators</h2><p>Operators are just callable methods that have been registered in a submodule of the Blender API. The listed operators should allow you to do anything that is possible to do from the Send to Unreal menu as well as the Settings Dialog.</p><h3 id="send-to-unreal" tabindex="-1"><a class="header-anchor" href="#send-to-unreal" aria-hidden="true">#</a> Send to Unreal</h3><p>Quickly send your assets to an open Unreal editor instance without a dialog,</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>wm<span class="token punctuation">.</span>send2ue<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="settings-dialog" tabindex="-1"><a class="header-anchor" href="#settings-dialog" aria-hidden="true">#</a> Settings Dialog</h3><p>Open the settings dialog to modify the tool properties,</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>wm<span class="token punctuation">.</span>settings_dialog<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="import-asset" tabindex="-1"><a class="header-anchor" href="#import-asset" aria-hidden="true">#</a> Import Asset</h3><p>Import a file that came from Unreal,</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>wm<span class="token punctuation">.</span>import_asset<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="create-pre-defined-collections" tabindex="-1"><a class="header-anchor" href="#create-pre-defined-collections" aria-hidden="true">#</a> Create Pre-defined Collections</h3><p>Create the predefined collections that are needed for data collection (Export).</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>create_predefined_collections<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="save-template" tabindex="-1"><a class="header-anchor" href="#save-template" aria-hidden="true">#</a> Save Template</h3><p>Saves the current state of the properties to the specified template file.</p><ul><li>param <code>str</code> <code>filepath</code> The full path of the template file.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>save_template<span class="token punctuation">(</span>filepath<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="load-template" tabindex="-1"><a class="header-anchor" href="#load-template" aria-hidden="true">#</a> Load Template</h3><p>Loads the specified template file into the template folder location.</p><ul><li>param <code>str</code> <code>filepath</code> The full path of the template file.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>load_template<span class="token punctuation">(</span>filepath<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="remove-template" tabindex="-1"><a class="header-anchor" href="#remove-template" aria-hidden="true">#</a> Remove Template</h3><p>Remove the settings template that is currently selected as active.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>remove_template<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="reload-extensions" tabindex="-1"><a class="header-anchor" href="#reload-extensions" aria-hidden="true">#</a> Reload Extensions</h3><p>Reload the extensions files. If changes are made to the extension code, this should be called to reload the code.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>reload_extensions<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="start-rpc-servers" tabindex="-1"><a class="header-anchor" href="#start-rpc-servers" aria-hidden="true">#</a> Start RPC Servers</h3><p>Bootstraps Unreal and Blender with RPC server threads so that they are ready for remote calls.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>start_rpc_servers<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><div class="custom-container tip"><p class="custom-container-title">Change Template Example</p><p>Here is how you could automate loading a settings template from a file and making it the active template.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> bpy

<span class="token comment"># load the file into the template folder location</span>
bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>load_template<span class="token punctuation">(</span>filepath<span class="token operator">=</span><span class="token string">r&#39;C:/some/file/path/my_template.json&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># set the active template which modifies the state of the properties</span>
bpy<span class="token punctuation">.</span>context<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>active_settings_template <span class="token operator">=</span> <span class="token string">&#39;my_template.json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">Change Properties Example</p><p>Here is how you could use Python to dynamically change the mesh import folder of your asset.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> bpy

<span class="token comment"># set the mesh import folder</span>
folder_name <span class="token operator">=</span> some_custom_function_that_gets_a_folder_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
bpy<span class="token punctuation">.</span>context<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>unreal_mesh_folder_path <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;/Game/</span><span class="token interpolation"><span class="token punctuation">{</span>folder_name<span class="token punctuation">}</span></span><span class="token string">/&#39;</span></span>

<span class="token comment"># run send to unreal</span>
bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>wm<span class="token punctuation">.</span>send2ue<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The same process can be used to dynamically set any property on the Send to Unreal tool.</p>`,43),i=[p];function l(c,d){return a(),n("div",null,i)}const u=e(o,[["render",l],["__file","python-api.html.vue"]]);export{u as default};

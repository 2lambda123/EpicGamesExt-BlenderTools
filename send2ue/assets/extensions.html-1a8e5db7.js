import{_ as o,r as p,o as i,c,a as e,b as n,d as s,e as t}from"./app-3ee0fe23.js";const r="/BlenderTools/send2ue/assets/1-ea880476.svg",l="/BlenderTools/send2ue/assets/2-2a8e0210.png",d="/BlenderTools/send2ue/assets/3-f78ef698.png",u="/BlenderTools/send2ue/assets/4-27ac20e6.png",h={},m=t('<h1 id="extensions" tabindex="-1"><a class="header-anchor" href="#extensions" aria-hidden="true">#</a> Extensions</h1><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>This feature set is still very new and could be subject to change.</p></div><div class="custom-container tip"><p class="custom-container-title">Supported Extensions</p><p>See the Supported Extensions section for details on extensions that ship with the Send to Unreal addon and are supported by this repository.</p></div><p>Extensions provide a python interface for Send to Unreal users to quickly and cleanly extend its functionality with a minimal amount of code. Within an extension class several things can be defined:</p>',4),k={href:"/customize/extensions.html#tasks",target:"_blank",rel:"noopener noreferrer"},v={href:"/customize/extensions.html#properties",target:"_blank",rel:"noopener noreferrer"},b={href:"/customize/extensions.html#draws",target:"_blank",rel:"noopener noreferrer"},y=t('<p><img src="'+r+`" alt="1"></p><p>In this diagram each blue arrow that plugs into a blue block represents how the extension factory takes pieces of your extension class and plugs in its logic within the send to unreal operation.</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>The queue can run many asset tasks, therefore the extension logic added in the asset task area will be fired as many times as there are assets. However, anything outside the asset task will be run once per send to unreal operation.</p></div><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>Here is a simple example</p><h3 id="the-code" tabindex="-1"><a class="header-anchor" href="#the-code" aria-hidden="true">#</a> The Code</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> bpy
<span class="token keyword">from</span> pprint <span class="token keyword">import</span> pprint
<span class="token keyword">from</span> send2ue<span class="token punctuation">.</span>core<span class="token punctuation">.</span>extension <span class="token keyword">import</span> ExtensionBase

<span class="token keyword">class</span> <span class="token class-name">ExampleExtension</span><span class="token punctuation">(</span>ExtensionBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&#39;example&#39;</span>
    hello_property<span class="token punctuation">:</span> bpy<span class="token punctuation">.</span>props<span class="token punctuation">.</span>StringProperty<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">draw_validations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dialog<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">:</span>
        row <span class="token operator">=</span> layout<span class="token punctuation">.</span>row<span class="token punctuation">(</span><span class="token punctuation">)</span>
        row<span class="token punctuation">.</span>prop<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">&#39;hello_property&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pre_operation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">:</span>
        properties<span class="token punctuation">.</span>unreal_mesh_folder_path <span class="token operator">=</span> <span class="token string">&#39;/Game/example_extension/test/&#39;</span>

    <span class="token keyword">def</span> <span class="token function">pre_validations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>hello_property <span class="token operator">!=</span> <span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

    <span class="token keyword">def</span> <span class="token function">pre_mesh_export</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> asset_data<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">:</span>
        pprint<span class="token punctuation">(</span>asset_data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This adds a property, a pre operation task that changes the <code>unreal_mesh_folder_path</code> value, a pre mesh export task that prints out the asset data of the mesh, and a validation that checks to ensure that <code>hello_property</code> is equal to &quot;Hello world&quot;, otherwise it returns False which terminates the send to unreal operation execution.</p>`,8),g={class:"custom-container tip"},_=e("p",{class:"custom-container-title"},"Note",-1),f=e("code",null,"name",-1),x={href:"https://github.com/EpicGames/BlenderTools/blob/master/tests/test_files/send2ue_extensions/example_extension.py",target:"_blank",rel:"noopener noreferrer"},w=t('<h3 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h3><p>Save the extension code in a folder. This folder is know as the <code>Extensions Repo Folder</code>. You can place as many extensions in this folder as needed. In this example, the file is saved to<code>C:\\extension_repo\\example.py</code>.</p><p><img src="'+l+`" alt="2"></p><p>Then in the Send to Unreal addon preferences set the <code>Extensions Repo Folder</code> to <code>C:\\extension_repo</code>. Then click the <code>Reload Extensions</code> button.</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Alternatively, this can be installed with python:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># this is handy for reloading your changes as you develop extensions</span>
bpy<span class="token punctuation">.</span>context<span class="token punctuation">.</span>preferences<span class="token punctuation">.</span>addons<span class="token punctuation">[</span><span class="token string">&#39;send2ue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>preferences<span class="token punctuation">.</span>extensions_repo_path <span class="token operator">=</span> <span class="token string">&#39;C:\\extension_repo&#39;</span>
bpy<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>reload_extensions<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> Test</h3><p>Now when we use Send to Unreal to with the default cube, we can see the <code>asset_data</code> dictionary printing in the console and that the cube got sent to the <code>/Game/example_extension/test/</code> folder in the unreal project.</p><p><img src="`+d+'" alt="3"></p>',8),S={href:"https://github.com/EpicGames/BlenderTools/tree/master/send2ue/resources/extensions",target:"_blank",rel:"noopener noreferrer"},T=t(`<h2 id="tasks" tabindex="-1"><a class="header-anchor" href="#tasks" aria-hidden="true">#</a> Tasks</h2><p>Tasks contain logic for key points within the runtime of the send to unreal operation. This is done by registering methods on the extension&#39;s property group class. When the Send to Unreal operation gets run, the extension tasks get executed. The methods below can be implemented in an extension class and the Send to Unreal extension factory will inject the tasks.</p><h4 id="filter-objects" tabindex="-1"><a class="header-anchor" href="#filter-objects" aria-hidden="true">#</a> <em>filter_objects</em></h4><p>Defines a filter for the armature and mesh objects after they have been initially collected.</p><ul><li>param <code>list[bpy.types.Object]</code> <code>armature_objects</code> A list of armature objects.</li><li>param <code>list[bpy.types.Object]</code> <code>mesh_objects</code> A list of mesh objects.</li><li>returns A tuple which is a filtered list of armature objects, and a filtered list of meshes objects.</li><li>rtype tuple(list, list)</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>filter_objects<span class="token punctuation">(</span>self<span class="token punctuation">,</span> armature_objects<span class="token punctuation">,</span> mesh_objects<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="pre-operation" tabindex="-1"><a class="header-anchor" href="#pre-operation" aria-hidden="true">#</a> <em>pre_operation</em></h4><p>Defines the pre operation logic that will be run before the send to unreal operation.</p><ul><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pre_operation<span class="token punctuation">(</span>self<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="post-operation" tabindex="-1"><a class="header-anchor" href="#post-operation" aria-hidden="true">#</a> <em>post_operation</em></h4><p>Defines the post operation logic that will be run before the send to unreal operation.</p><ul><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>post_operation<span class="token punctuation">(</span>self<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="pre-validations" tabindex="-1"><a class="header-anchor" href="#pre-validations" aria-hidden="true">#</a> <em>pre_validations</em></h4><p>Defines the pre validation logic that will be an injected operation.</p><ul><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li><li>return <code>bool</code> Whether or not the validation has passed.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pre_validations<span class="token punctuation">(</span>self<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="post-validations" tabindex="-1"><a class="header-anchor" href="#post-validations" aria-hidden="true">#</a> <em>post_validations</em></h4><p>Defines the post validation logic that will be an injected operation.</p><ul><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li><li>return <code>bool</code> Whether or not the validation has passed.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>post_validations<span class="token punctuation">(</span>self<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="pre-animation-export" tabindex="-1"><a class="header-anchor" href="#pre-animation-export" aria-hidden="true">#</a> <em>pre_animation_export</em></h4><p>Defines the pre animation export logic that will be an injected operation.</p><ul><li>param <code>dict</code> <code>asset_data</code> A mutable dictionary of asset data for the current asset.</li><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pre_animation_export<span class="token punctuation">(</span>self<span class="token punctuation">,</span> asset_data<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="post-animation-export" tabindex="-1"><a class="header-anchor" href="#post-animation-export" aria-hidden="true">#</a> <em>post_animation_export</em></h4><p>Defines the post animation export logic that will be an injected operation.</p><ul><li>param <code>dict</code> <code>asset_data</code> A mutable dictionary of asset data for the current asset.</li><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>post_animation_export<span class="token punctuation">(</span>self<span class="token punctuation">,</span> asset_data<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="pre-mesh-export" tabindex="-1"><a class="header-anchor" href="#pre-mesh-export" aria-hidden="true">#</a> <em>pre_mesh_export</em></h4><p>Defines the pre mesh export logic that will be an injected operation.</p><ul><li>param <code>dict</code> <code>asset_data</code> A mutable dictionary of asset data for the current asset.</li><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pre_mesh_export<span class="token punctuation">(</span>self<span class="token punctuation">,</span> asset_data<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="post-mesh-export" tabindex="-1"><a class="header-anchor" href="#post-mesh-export" aria-hidden="true">#</a> <em>post_mesh_export</em></h4><p>Defines the post mesh export logic that will be an injected operation.</p><ul><li>param <code>dict</code> <code>asset_data</code> A mutable dictionary of asset data for the current asset.</li><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>post_mesh_export<span class="token punctuation">(</span>self<span class="token punctuation">,</span> asset_data<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="pre-import" tabindex="-1"><a class="header-anchor" href="#pre-import" aria-hidden="true">#</a> <em>pre_import</em></h4><p>Defines the pre import logic that will be an injected operation.</p><ul><li>param <code>dict</code> <code>asset_data</code> A mutable dictionary of asset data for the current asset.</li><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pre_import<span class="token punctuation">(</span>self<span class="token punctuation">,</span> asset_data<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="post-import" tabindex="-1"><a class="header-anchor" href="#post-import" aria-hidden="true">#</a> <em>post_import</em></h4><p>Defines the post import logic that will be an injected operation.</p><ul><li>param <code>dict</code> <code>asset_data</code> A mutable dictionary of asset data for the current asset.</li><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>post_import<span class="token punctuation">(</span>self<span class="token punctuation">,</span> asset_data<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="utility-operators" tabindex="-1"><a class="header-anchor" href="#utility-operators" aria-hidden="true">#</a> Utility Operators</h2><p>Utility operators are authored just like you would author any other blender operator. The class attribute <code>utility_operators</code> is a place where a list of operator classes can be assigned. This list of operator classes will be auto registered and added to the utilities submenu under <code>Pipeline &gt; Utilities</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ExtensionBase</span><span class="token punctuation">:</span>
    utility_operators <span class="token operator">=</span> <span class="token punctuation">[</span>
        YourOperatorClass
    <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),U={href:"https://docs.blender.org/api/current/bpy.types.Operator.html",target:"_blank",rel:"noopener noreferrer"},E=t(`<h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><p>Extension properties must be defined in the extension class&#39;s annotations. This is done using the <code>:</code> instead of <code>=</code> for assignment like so:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ExampleExtension</span><span class="token punctuation">(</span>ExtensionBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&#39;example&#39;</span>
    hello_property<span class="token punctuation">:</span> bpy<span class="token punctuation">.</span>props<span class="token punctuation">.</span>StringProperty<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Properties can be any property type in <code>bpy.props</code></p></div><p>All properties defined in the extension class get registered as a sub property group within the <code>send2ue</code> scene data hierarchy. In the above example, the <code>hello_property</code> could be accessed within an extension task method like:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>self<span class="token punctuation">.</span>hello_property
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Or globally like:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bpy<span class="token punctuation">.</span>context<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>send2ue<span class="token punctuation">.</span>extensions<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hello_property
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Extension properties get saved when the blend file is saved, and can have their values saved to templates just like the default properties that exist in the Send to Unreal tool.</p></div><h2 id="asset-data-dictionary" tabindex="-1"><a class="header-anchor" href="#asset-data-dictionary" aria-hidden="true">#</a> Asset Data Dictionary</h2><p>During the life cycle of the Send to Unreal operation a dictionary <code>asset_data</code> is created that contains all assets that will be sent in the operation. Per asset, data gets fetched and passed into the task method via the <code>asset_data</code> param in certain extension task methods. i.e <code>pre_mesh_export(self, asset_data, properties)</code>.</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Any <code>asset_data</code> dictionary value that is prefixed with <code>_</code> i.e. <code>_asset_type</code> etc. has no effect on how Send to Unreal uses that data. However, changing values not prefixed with an underscore will change the Send to Unreal behavior.</p></div><p>Here is an example of a potential renaming use case.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> send2ue<span class="token punctuation">.</span>core<span class="token punctuation">.</span>extension <span class="token keyword">import</span> ExtensionBase
<span class="token keyword">class</span> <span class="token class-name">ExampleExtension</span><span class="token punctuation">(</span>ExtensionBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&#39;example&#39;</span>
    <span class="token keyword">def</span> <span class="token function">pre_mesh_export</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> asset_data<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># the asset data using the current asset id</span>
        path<span class="token punctuation">,</span> ext <span class="token operator">=</span> asset_data<span class="token punctuation">[</span><span class="token string">&#39;file_path&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
        asset_path <span class="token operator">=</span> asset_data<span class="token punctuation">[</span><span class="token string">&#39;asset_path&#39;</span><span class="token punctuation">]</span>

        asset_data<span class="token punctuation">[</span><span class="token string">&#39;file_path&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>path<span class="token punctuation">}</span></span><span class="token string">_added_this.</span><span class="token interpolation"><span class="token punctuation">{</span>ext<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
        asset_data<span class="token punctuation">[</span><span class="token string">&#39;asset_path&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>asset_path<span class="token punctuation">}</span></span><span class="token string">_added_this&#39;</span></span>
        pprint<span class="token punctuation">(</span>asset_data<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>update_asset_data<span class="token punctuation">(</span>asset_data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here you can see that we forced a rename of the asset by changing the fbx name, then we updated the asset path so that Send to Unreal would still have a reference to the imported asset.</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>In order for the <code>asset_data</code> to be updated you must call <code>self.update_asset_data(asset_data)</code> like shown above.</p></div><p>This is what the Mesh&#39;s <code>asset_data</code> looks like from the example above after being modified:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
 <span class="token string">&#39;_asset_type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;MESH&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;_mesh_object_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Cube1&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;asset_folder&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;/Game/example_extension/test/&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;asset_path&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;/Game/example_extension/test/Cube1_added_this&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;file_path&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;C:\\\\Users\\\\User~1\\\\AppData\\\\Local\\\\Temp\\\\blender\\\\send2ue\\\\data\\\\mesh\\\\Cube1_added_this.fbx&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;import_mesh&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
 <span class="token string">&#39;lods&#39;</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
 <span class="token string">&#39;skeletal_mesh&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
 <span class="token string">&#39;skeleton_asset_path&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;sockets&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Modifying this dictionary incorrectly will produce errors. You must implement your own validations to ensure this is modified correctly.</p></div><h2 id="draws" tabindex="-1"><a class="header-anchor" href="#draws" aria-hidden="true">#</a> Draws</h2><p>Defining draws for your extension is a way to make your extension properties available to be edited by the user. Using the same example extension above, the <code>draw_validations</code> implementation adds this UI into the Send to Unreal Settings Dialog.</p><p><img src="`+u+`" alt="4"></p><h4 id="draw-validations" tabindex="-1"><a class="header-anchor" href="#draw-validations" aria-hidden="true">#</a> <em>draw_validations</em></h4><p>Can be overridden to draw an interface for the extension under the validations tab.</p><ul><li>param <code>Send2UnrealDialog</code> <code>dialog</code> The dialog class.</li><li>param <code>bpy.types.UILayout</code> <code>layout</code> The extension layout area.</li><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>draw_validations<span class="token punctuation">(</span>self<span class="token punctuation">,</span> dialog<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="draw-export" tabindex="-1"><a class="header-anchor" href="#draw-export" aria-hidden="true">#</a> <em>draw_export</em></h4><p>Can be overridden to draw an interface for the extension under the export tab.</p><ul><li>param <code>Send2UnrealDialog</code> <code>dialog</code> The dialog class.</li><li>param <code>bpy.types.UILayout</code> <code>layout</code> The extension layout area.</li><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>draw_export<span class="token punctuation">(</span>self<span class="token punctuation">,</span> dialog<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="draw-import" tabindex="-1"><a class="header-anchor" href="#draw-import" aria-hidden="true">#</a> <em>draw_import</em></h4><p>Can be overridden to draw an interface for the extension under the import tab.</p><ul><li>param <code>Send2UnrealDialog</code> <code>dialog</code> The dialog class.</li><li>param <code>bpy.types.UILayout</code> <code>layout</code> The extension layout area.</li><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>draw_import<span class="token punctuation">(</span>self<span class="token punctuation">,</span> dialog<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="draw-paths" tabindex="-1"><a class="header-anchor" href="#draw-paths" aria-hidden="true">#</a> <em>draw_paths</em></h4><p>Can be overridden to draw an interface for the extension under the paths tab.</p><ul><li>param <code>Send2UnrealDialog</code> <code>dialog</code> The dialog class.</li><li>param <code>bpy.types.UILayout</code> <code>layout</code> The extension layout area.</li><li>param <code>Send2UeSceneProperties</code> <code>properties</code> The scene property group that contains all the addon properties.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>draw_paths<span class="token punctuation">(</span>self<span class="token punctuation">,</span> dialog<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> properties<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="rpc-library" tabindex="-1"><a class="header-anchor" href="#rpc-library" aria-hidden="true">#</a> RPC Library</h2><p>There is a submodule within <code>send2ue</code> that can be used to make your own rpc calls. Here is a basic example of how you can force an asset to be renamed in the <code>post_import</code> method of an extension.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> send2ue<span class="token punctuation">.</span>core<span class="token punctuation">.</span>extension <span class="token keyword">import</span> ExtensionBase
<span class="token keyword">from</span> send2ue<span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span>unreal <span class="token keyword">import</span> remote_unreal_decorator


<span class="token decorator annotation punctuation">@remote_unreal_decorator</span>
<span class="token keyword">def</span> <span class="token function">rename_unreal_asset</span><span class="token punctuation">(</span>source_asset_path<span class="token punctuation">,</span> destination_asset_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> unreal<span class="token punctuation">.</span>EditorAssetLibrary<span class="token punctuation">.</span>does_asset_exist<span class="token punctuation">(</span>destination_asset_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        unreal<span class="token punctuation">.</span>EditorAssetLibrary<span class="token punctuation">.</span>delete_asset<span class="token punctuation">(</span>destination_asset_path<span class="token punctuation">)</span>
    <span class="token keyword">return</span> unreal<span class="token punctuation">.</span>EditorAssetLibrary<span class="token punctuation">.</span>rename_asset<span class="token punctuation">(</span>source_asset_path<span class="token punctuation">,</span> destination_asset_path<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">ExampleExtension</span><span class="token punctuation">(</span>ExtensionBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&#39;example&#39;</span>
    <span class="token keyword">def</span> <span class="token function">post_import</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        asset_path <span class="token operator">=</span> self<span class="token punctuation">.</span>asset_data<span class="token punctuation">[</span>self<span class="token punctuation">.</span>asset_id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;asset_path&#39;</span><span class="token punctuation">]</span>
        rename_unreal_asset<span class="token punctuation">(</span>asset_path<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>asset_path<span class="token punctuation">}</span></span><span class="token string">_renamed_again&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how you can define remote unreal functions on the fly by just wrapping your function with the <code>remote_unreal_decorator</code>. The RPC library has a factory that takes care of teleporting your code and imports over to the open unreal editor.</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>RPC calls must be defined as function or a staticmethod of a class, and only basic python data types can be marshalled through the function parameters. No object params or kwargs are excepted.</p></div>`,43);function j(P,D){const a=p("ExternalLinkIcon");return i(),c("div",null,[m,e("ul",null,[e("li",null,[e("a",k,[n("Tasks"),s(a)])]),e("li",null,[e("a",v,[n("Properties"),s(a)])]),e("li",null,[e("a",b,[n("Draws"),s(a)])])]),y,e("div",g,[_,e("p",null,[n("At minimum, an extension must have the class attribute "),f,n(" defined. Everything else is optional. A more advanced extension example is available "),e("a",x,[n("here"),s(a)]),n(".")])]),w,e("p",null,[n("This same approach can be applied to many other use cases where you need to extend the Send to Unreal operation. For practical examples check out the "),e("a",S,[n("send2ue/resources"),s(a)]),n(" folder.")]),T,e("p",null,[n("Refer to the "),e("a",U,[n("blender API docs"),s(a)]),n(" for more information.")]),E])}const N=o(h,[["render",j],["__file","extensions.html.vue"]]);export{N as default};

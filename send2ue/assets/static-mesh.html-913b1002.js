import{_ as n,r as i,o as r,c,a as t,b as e,d as o,e as a}from"./app-3ee0fe23.js";const d="/BlenderTools/send2ue/assets/1-9785111e.gif",l="/BlenderTools/send2ue/assets/2-933c2501.gif",h="/BlenderTools/send2ue/assets/3-e00d7057.png",p="/BlenderTools/send2ue/assets/4-74671921.png",m="/BlenderTools/send2ue/assets/5-51f75b50.png",u="/BlenderTools/send2ue/assets/6-7fae8fa0.png",_="/BlenderTools/send2ue/assets/7-f60c976d.png",f="/BlenderTools/send2ue/assets/8-a1039f25.png",g={},b=a('<h1 id="static-mesh" tabindex="-1"><a class="header-anchor" href="#static-mesh" aria-hidden="true">#</a> Static Mesh</h1><p>Static meshes are simple. The tool looks in the <code>Export</code> set for objects of type <code>MESH</code> and sends them to unreal as individual Static Mesh assets to unreal.</p><p><img src="'+d+'" alt="1"></p><p>In this example, you can see the result is two Unreal Static Mesh assets along with their material.</p><p><img src="'+l+'" alt="2"></p><h2 id="lods" tabindex="-1"><a class="header-anchor" href="#lods" aria-hidden="true">#</a> LODs</h2><p>LOD workflows for static meshes are supported. Simply activate the LODs option in the LOD Settings group and Send to Unreal will handle exporting and importing each LOD.</p><p><img src="'+h+'" alt="3"></p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>If your mesh has a LOD naming scheme and Import LODs is true, the LOD postfix will get stripped out of the final asset name based on the lod regex. For example:</p><p><code>pCube1_LOD0 = pCube1</code></p><p><code>pCube2_lod0_mesh = pCube2</code></p></div><p>Also notice that the LOD build settings can be set under the <code>Import &gt; Editor Settings &gt; Static Mesh LOD Build Settings</code> group.</p><p><img src="'+p+'" alt="4"></p>',11),x={class:"custom-container tip"},v=t("p",{class:"custom-container-title"},"Note",-1),y={href:"https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/EditorStaticMeshLibrary.html",target:"_blank",rel:"noopener noreferrer"},S=a('<h2 id="collisions" tabindex="-1"><a class="header-anchor" href="#collisions" aria-hidden="true">#</a> Collisions</h2><p>Simple collision workflows for static meshes are supported by prefixing your collision names with their respective identifiers and making them a child of the mesh.</p><table><thead><tr><th>Mesh Prefix and Name</th><th>Description</th></tr></thead><tbody><tr><td><code>UBX_[RenderMeshName]_##</code></td><td>A Box must be created using a regular rectangular 3D object. You cannot move the vertices around or deform it in any way to make it something other than a rectangular prism, or else it will not work.</td></tr><tr><td><code>UCP_[RenderMeshName]_##</code></td><td>A Capsule must be a cylindrical object capped with hemispheres. It does not need to have many segments (8 is a good number) at all because it is converted into a true capsule for collision. Like boxes, you should not move the individual vertices around.</td></tr><tr><td><code>USP_[RenderMeshName]_##</code></td><td>A Sphere does not need to have many segments (8 is a good number) at all because it is converted into a true sphere for collision. Like boxes, you should not move the individual vertices around.</td></tr><tr><td><code>UCX_[RenderMeshName]_##</code></td><td>A Convex object can be any completely closed convex 3D shape. For example, a box can also be a convex object.</td></tr></tbody></table>',3),k={href:"https://docs.unrealengine.com/5.0/en-US/WorkingWithContent/Importing/FBX/StaticMeshes/",target:"_blank",rel:"noopener noreferrer"},w=a('<p><img src="'+m+'" alt="5"></p><p>Collisions are imported with the asset that matches the <code>[RenderMeshName]</code> after the collision prefix.</p><p><img src="'+u+'" alt="6"></p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Collisions must be in the <code>Export</code> collection to be exported.</p></div><h2 id="sockets" tabindex="-1"><a class="header-anchor" href="#sockets" aria-hidden="true">#</a> Sockets</h2><p>There is a supported workflow for adding sockets to static meshes.</p><p><img src="'+_+'" alt="8"></p><p>Any child mesh that has the pre fix <code>SOCKET_</code> in its name will be separately imported as a socket of its parent.</p><p><img src="'+f+'" alt="9"></p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Socket names have the <code>SOCKET_</code> prefix stripped out. <code>SOCKET_socket_01</code> in blender becomes <code>socket_01</code> in unreal.</p></div><h2 id="only-mesh" tabindex="-1"><a class="header-anchor" href="#only-mesh" aria-hidden="true">#</a> Only Mesh</h2>',11),B={href:"/settings/import.html",target:"_blank",rel:"noopener noreferrer"},L=t("code",null,"Mesh",-1);function M(T,C){const s=i("ExternalLinkIcon");return r(),c("div",null,[b,t("div",x,[v,t("p",null,[e("The Editor Settings corresponds to what is available in the "),t("a",y,[e("EditorStaticMeshLibrary"),o(s)]),e(" in the Unreal Python API:")])]),S,t("p",null,[e("The underlying mechanism for this is the Unreal FBX importer, so for further information, please refer to the "),t("a",k,[e("FBX Guide for static meshes"),o(s)]),e(".")]),w,t("p",null,[e("To run a strictly mesh asset import (ex: excluding import of particle systems as groom assets), all import options must be turned off in your "),t("a",B,[e("import settings"),o(s)]),e(" except for "),L,e(".")])])}const D=n(g,[["render",M],["__file","static-mesh.html.vue"]]);export{D as default};

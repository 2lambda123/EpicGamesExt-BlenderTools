name: Continuous Integration

on:
  workflow_dispatch:
    inputs:
      sha:
        description: 'The sha of the commit'
        required: true
        default: ''
      message:
        description: 'The commit message'
        required: true
        default: ''
      html_url:
        description: 'The url to the commit'
        required: true
        default: ''

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]

    steps:
    - name: Commit Message "${{ github.event.inputs.message }}"
      run: |
        echo "Message: ${{ github.event.inputs.message }}"
        echo "Link: ${{ github.event.inputs.html_url }}"
        echo "sha: ${{ github.event.inputs.sha }}"

    - name: Check Out Commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.sha }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install PyGithub

    - name: Validate Python Syntax test
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude properties.py,operators.py
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=20 --max-line-length=127 --statistics --exclude properties.py,operators.py,metarig.py,remote_execution.py --ignore=F541,F405,W292,F403

    - name: Run Unit Tests
      id: commit-status
      run: |
        cd ./test/scripts
        echo "Starting CI machine... This might take a few minutes..."

        function print {
            python ./ci_logger.py --sha ${{ github.event.inputs.sha }} --pull True --token ${{ secrets.GITHUB_TOKEN }}
            cat ./latest_logs.log
        }

        print
        python ./ci_logger.py --set_status True --status "pending" --description "Running unit tests..." --run_number ${{ github.run_number }} --token ${{ secrets.GITHUB_TOKEN }})

        # Check the status of the Git commit
        CURRENT_STATUS=$(python ./ci_logger.py --sha ${{ github.event.inputs.sha }} --get_status True --token ${{ secrets.GITHUB_TOKEN }});
        while [ "${CURRENT_STATUS^^}" = "PENDING" ];
          do sleep 5;
          print

          CURRENT_STATUS=$(python ./ci_logger.py --sha ${{ github.event.inputs.sha }} --get_status True --token ${{ secrets.GITHUB_TOKEN }});
        done;
        if [ "${CURRENT_STATUS^^}" = "FAILURE" ];
        then
          print
          python ./ci_logger.py --set_status True --status "failed" --description "Failed to pass unit tests!" --run_number ${{ github.run_number }} --token ${{ secrets.GITHUB_TOKEN }})
          echo "CI Machine Failure!"
          exit 1;
        fi

        print "success" "Unit Tests Passed!"
        python ./ci_logger.py --set_status True --status "success" --description "Passed all unit tests!" --run_number ${{ github.run_number }} --token ${{ secrets.GITHUB_TOKEN }})